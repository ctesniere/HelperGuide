[user]
	name = Cedric TESNIERE
	email = tesniere.cedric@gmail.com
[core]
	excludesfile = "~/.gitignore_global"
	editor = subl -n -w
	autocrlf = input # Prevent line ending issues
	compression = 9 
[pull]
	rebase = true
[push]
	default = current
[color]
	ui = always
[log]
	abbrevCommit = true
[rebase]
	autoStash = true
[credential]
	helper = store
[rerere]
	enabled = true
[grep]
	extendedRegexp = true
[alias]
	# status
	st = status -sb
	## diff between HEAD local and remote, ex : git new | git new origin/master
	new = !sh -c 'git log --stat $1@{1}..$1@{0} "$@"'

	# branch
	br = branch -vv -a
	brDF = "!f() { git branch -D $1 && for r in $(git remote); do git push $r :$1; done; }; f"
	co = checkout
	cob = checkout -b

	# check & refresh
	fetchall = fetch --all --tag --prune
	refresh = "!f() { git checkout $1 && git pull common $1 && git push origin $1; }; f"

	# Log
	l = log --date-order --date=iso --graph --full-history --pretty=format:'%C(red)%h %C(cyan)%ad%x08%x08%x08%x08%x08%x08%x08%x08%x08 %C(bold blue)%aN%C(reset) %C(auto)%d %C(reset)%s'
	ll = log --date-order --date=iso --graph --full-history --all --pretty=format:'%C(red)%h %C(cyan)%ad%x08%x08%x08%x08%x08%x08%x08%x08%x08 %C(bold blue)%aN%C(reset) %C(auto)%d %C(reset)%s'
	who = shortlog -sne
	diffc = diff --cached
	diffs = diff --stat

	# Annuler le dernier commit
	undo = git reset --soft HEAD^

	# Commit
	ci = commit

	# Rewriting history
	amend = commit --amend
	fixup = "!sh -c 'COMMIT=$(git rev-parse $1) && git commit --fixup=$COMMIT && git rebase -i --autostash --autosquash $COMMIT~1' -"
	rh = "!f() { git reset --hard $1; }; f"
	## Interactive rebase with the given number of latest commits
	reb = "!f() { git rebase -i HEAD~$1; }; f"
	rebconti = rebase --continue
	rebabort = rebase --abort
	rebdevelop = rebase -i develop

	# Gitk
	k = !gitk&
	kll = !gitk --all&

	# Search
	## Find branches containing sha1 commit
	fb = "!f() { git branch -a --contains $1; }; f"
	## Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"
	## Find commits by source code
	fcs = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
	## Find commits by commit message
	fmsg = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --no-merges -i --grep=$1; }; f"
	## Search commits by author
	fauthor = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --author=\"$1\"; }; f"

	# Other
	## Launch test for all commits, todo : dectect maven, gradle, ...
	rebtest = "!f() { git rebase -i --exec 'mvn clean test' $1; }; f"
	clean = !git clean -df
[filter "media"]
	required = true
	clean = git media clean %f
	smudge = git media smudge %f
[pager]
	diff = diff-so-fancy | less --tabs=1,5 -RFX
	show = diff-so-fancy | less --tabs=1,5 -RFX
